<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on JadeRong</title>
    <link>https://rrrwx.github.io/tags/java/</link>
    <description>Recent content in java on JadeRong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Mar 2020 00:10:36 +0800</lastBuildDate>
    
	<atom:link href="https://rrrwx.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM学习八之字节码指令</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E5%85%AB%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Wed, 25 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E5%85%AB%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</guid>
      <description> Java虚拟机的指令由一个字节长度（u1）、代表着某种特定操作含义的数字（操作码，Opcode）以及跟随其后的零至多个代表此操作所需参数（操作数，Operands）而构成。
Java虚拟机采用面向操作数栈而不是寄存器的架构，大多数指令都不包含操作数，只有一个操作码。
  大部分指令都没有支持byte、char、short、boolean类型。是因为编译器在编译期或运行期将byte、short类型直接带符号扩展(Sign-Extend)，对boolean、char类型零位扩展(Zero-Extend)。
因此在实际操作时都是使用相应的int类型作为运算类型。
 指令分为：
1、加载和存储指令 用于将数据在栈帧中的局部变量表和操作数栈之间来回传输。
比如iload_, istore_, iconst_, wide等
2、运算指令 对两个操作数栈上的值进行某种特定运算，并重新存入到操作数栈顶。
如iadd, isub, idiv, imul, irem, ineg, ior, ishl, iinc, dcmog(比较)等
3、类型转换指令 将两种不同的数值类型进行相互转换，这些转换操作一般用于实现用户代码中的显示类型转换操作，或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。 如i2b, i2c, i2s等;
进行窄化类型转换的时候，可能导致转换结果产生不同的正负号（简单丢弃多出的高位）、不同的数量级的情况，转换过程很可能会导致数值的精度丢失。
另外浮点值NaN会转换成整型的0。
4、对象创建与访问指令 类实例和数组的创建和操作使用不同的指令。
创建类实例：new；
创建数组：newarray、anewarray、multianewarray；
访问类字段和实例字段：getfield、getstatic等；
数组元素加载到操作数栈：iaload等；
操作数栈的值加载到数元素中：iastore等；
取数组长度：arraylength；
检查类实例类型：instanceof、checkcast。
5、操作数栈管理指令 直接操作操作数栈。
出栈：pop，pop2；
入栈：dup，dup2等；
交换：swap。
6、控制转移指令 让Java虚拟机有条件或无条件地从指定的位置指令而不是控制转移指令的吓一跳继续执行指令。即修改PC寄存器的值。
条件分支：ifeq、iflt、ifnull、if_cmpeq等；
复合条件分支：tableswitch、lookupswitch；
无条件分支：goto、jsr、ret等。
7、方法调用和返回指令 invokevirtual调用对象的实例方法；
invokeinterface调用接口方法；
inokespecial调用需要特殊处理的方法，你如实例初始化方法、私有方法和父类方法等；
invokestatic调用类方法；
invokedynamic在运行时动态解析出调用点限定符所引用的方法，并执行该方法；
返回指令：return、ireturn等。
8、异常处理指令 显式抛出异常的操作（throw语句）都由athrow指令来实现。
9、同步指令 支持synchronized方法块的同步
Java虚拟机支持方法级的同步以及方法内部一段指令的同步。使用管程（Monitor）来支持。
使用monitorenter和moniterexit两条指令来支持synchronized关键字的语义。
 另外，为了保证在方法异常完成时monitorenter和monitorexit指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可以处理所有的异常，目的就是用来执行monitorexit指令。
 </description>
    </item>
    
    <item>
      <title>JVM学习七之类文件结构</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%83%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 23 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%83%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
      <description>类文件结构 https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html https://blog.csdn.net/A_zhenzhen/article/details/77977345
 Class文件是一组以8位字节为基础单位的二进制流。
 （一）魔数：0xCAFEBABE 用于校验 （二）版本号 （三）常量池： cp_info
（四）访问标记： 通过相加计算得到访问标记
access_flags
（五）类索引、父类索引、接口索引 （六）字段表：描述接口和类中声明的变量 field_info
（七）方法表 method_info
（八）属性表 attribute_info
虚拟机规范预定义的属性: </description>
    </item>
    
    <item>
      <title>JVM学习六之虚拟机性能监控与故障处理工具</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E5%85%AD%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 22 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E5%85%AD%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>虚拟机性能监控与故障处理工具 https://www.cnblogs.com/chanshuyi/p/jvm_serial_15_jdk_monitor_command.html
1、jps：虚拟机进程状况工具 类似ps命令，可以查看虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID（Local Virtual Mechine Identifier， LVMID）
jps [ option ] [ hostid ] -m 主类接收的参数 -v 虚拟机接收的参数 -l 打印主类的全名 -q 省略主类的名称 2、jstat：虚拟机统计信息监视工具 在纯文本状态下监视虚拟机状态的变化。用的较多的就是-gcutil，关注已使用空间占总空间的百分比
jstat [ option vmid [interval[s|ms] [count]] ] #jstat -gcutil 2764 1000 10 #每秒执行一次，一共执行10次 3、jinfo：Java配置信息工具 实时查看和调整虚拟机的各项参数
jinfo [ option ] pid #jinfo -flag UseSerialGC 2764 #输出： -XX:-UseSerialGC #jinfo -flag [+/-]option pid #和参数设置-XX:[+/-]option作用一样 4、jmap：java内存印象工具 jmap用于生成堆转储快照（一般称为heapdump或dump）
jmap [ option ] vmid #jmap -dump:[live, ]format=b, file=&amp;lt;filename&amp;gt; vmid #这里的live子参数说明是否只dump出存活的对象 5、jhat：虚拟机堆转储快照分析工具 jhat与jmap搭配使用</description>
    </item>
    
    <item>
      <title>JVM学习五之内存分配与回收策略</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%BA%94%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</link>
      <pubDate>Fri, 20 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%BA%94%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</guid>
      <description>（一）内存分配与回收策略 给对象分配内存、 回收分配给对象的内存
1、对象优先在Eden分配  通过-XX:+PrintGCDetails打印收集器日志
-XX:SurvivorRatio=8指定Eden区大小
-XX:+UseSerialGC使用指定的收集器（Serial+Serial Old）
 2、大对象直接进入老年代  大对象指需要大量连续内存空间的Java对象，最典型的就是很长的字符串以及数组。
通过-XX:PretenureSizeThreshold参数指定需要分配至老年代的对象大小阈值
 3、长期存活的对象将进入老年代  -XX:MaxTenuringThreshold
在Survivor区每熬过一次Minor GC，年龄Age就会加1，直到加到阈值就会被晋升到老年代
动态对象年龄判定：如果Survivor控件中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就会直接进入老年代，无需等到设置的阈值中要求的年龄。
 4、空间分配担保  在Minor GC之前，虚拟机需要先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果成立则确保Minor GC是安全的；如果不成立，则会查看HandlePromotionFailure设置值是否允许担保失败，如果允许，则继续检查老年代最大可用空间是否大于历次晋升到老年代对象的平均大小，如果大于，则尝试Minor GC，尽管是有风险的，如果小于，则要进行Full GC。
-XX:+HandlePromotionFailure
 （二）逃逸分析与栈内分配 参考： https://blog.csdn.net/qiyue683209/article/details/82961472
 通过逃逸分析来决定某些实例或者变量是否要在堆中进行分配，如果开启了逃逸分析，即可将这些变量直接在栈上进行分配，而非堆上进行分配。这些变量的指针可以被全局所引用，或者被其它线程所引用。
 </description>
    </item>
    
    <item>
      <title>JVM学习三之垃圾回收</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BB%A5%E5%8F%8A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Thu, 19 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BB%A5%E5%8F%8A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>参考：https://www.jianshu.com/p/23f8249886c6
垃圾回收 （一）垃圾判断算法 1、引用计数法  引用计数算法是将垃圾回收分摊到整个应用程序的运行当中了，而不是在进行垃圾收集时，要挂起整个应用的运行，直到对堆中所有对象的处理都结束。因此，采用引用计数的垃圾收集不属于严格意义上的Stop-The-World的垃圾收集机制
 2、可达性分析算法  通过GC ROOT的对象作为搜索起始点，通过引用向下搜索，所走过的路径称为引用链。通过对象是否有到达引用链的路径来判断对象是否可被回收（可作为GC ROOT的对象：虚拟机栈中引用的对象，方法区中类静态属性引用的对象，方法区中常量引用的对象，本地方法栈中JNI引用的对象）
 （二）垃圾回收算法 1、标记-清除算法  标记-清除算法（Mark-Sweep）是最基础的一种垃圾回收算法，它分为2部分，先把内存区域中的这些对象进行标记，哪些属于可回收标记出来，然后把这些垃圾拎出来清理掉。清理掉的垃圾就变成未使用的内存区域，等待被再次使用。
问题：内存碎片、标记清除效率不高
 2、复制算法  复制算法（Copying）是在标记清除算法基础上演化而来，解决标记清除算法的内存碎片问题。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。保证了内存的连续可用，内存分配时也就不用考虑内存碎片等复杂情况。
问题：每次可用内存缩小一半
 3、标记-整理算法  标记-整理算法（Mark-Compact）标记过程仍然与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，再清理掉端边界以外的内存区域。
问题：对内存变动更频繁，需要整理所有存活对象的引用地址，效率低于复制算法
 4、分代收集算法  分代收集算法（Generational Collection）融合了上述3种基础的算法思想，根据对象存活周期的不同将内存划分为几块。
（1）在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。
（2）在老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记-清理算法或者标记-整理算法来进行回收。
 （三）垃圾收集器 1、Serial收集器  最基本，发展最悠久； 单线程垃圾收集器（“Stop The World”）； 桌面应用场景（因为虚拟机分配到的内存空间不大，用户停顿时间在毫秒级）；  2、ParNew收集器 实际上就是Serial收集器的多线程版本，使用多线程进行垃圾收集（多个垃圾GC线程）； 可与CMS收集器（Concurrent Mark Sweep）配合工作；
 这里引入“并行”和“并发”的区别：
“并行”：指多条垃圾收集进程并行工作，但此时用户线程仍处于等待状态；
“并发”：指用户进程和垃圾收集进程同时执行（但不一定是并行的，可能会交替执行），用户程序继续执行，垃圾收集进程运行于另一个CPU上。
 3、Paraller Scavenge收集器 （1）复制算法（新生代收集器） （2）多线程收集器 （3）达到可控制的吞吐量： -XX:MaxGCPauseMillis垃圾收集器最大停顿时间
-XX:GCTimeRatio吞吐量（倒数）大小：如果值设置为19，那允许的最大GC时间就占总时间的5%&amp;mdash;1/(1+19)
 吞吐量（Throughput）：CPU用于运行用户代码的时间与CPU总消耗时间的比值，即
吞吐量 = 运行用户代码时间 / （运行用户代码时间 + 垃圾收集时间）。</description>
    </item>
    
    <item>
      <title>JVM学习二之JMM与内存溢出异常</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%BA%8Cjava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 18 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%BA%8Cjava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</guid>
      <description>Java内存区域与内存溢出异常 （一）HotSpot虚拟机对象探秘 1、对象的创建 （1）为对象分配内存 https://blog.csdn.net/hyman_c/article/details/103051359
1)指针碰撞 2）空闲列表 选择哪种分配方式由Java堆是否规整来决定，而Java堆是否规整由所采用的垃圾收集器是否带有压缩整理功能（Conpact过程）决定。
（2）线程安全性问题 1）对分配内存控件的动作进行同步处理；
2）把内存分配的动作按照线程划分在不同的空间之中，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。当前TLAB用完并分配新的TLAB时，也需要同步锁定。
（3）对象的结构 https://www.cnblogs.com/duanxz/p/4967042.html https://blog.csdn.net/justry_deng/article/details/88421943
1）Object Header（对象头）：  HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如:哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。这部分数据的长度在32位和64位的虚拟机中分别为32bit和64bit，官方称它为“Mark Word”；
对象头的另一部分是类型指针，即对象指向它的类元数据的指针，在虚拟机通过这个指针来确定这个对象是哪个类的实例。不同虚拟机可以能有不同的实现，可能查找对象的元数据信息并不一定要通过对象本身。
 2）InstanceData（实例数据）：  实例数据部分是对象真正存储的有效信息，也是在程序代码中定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数(FieldsAllocationStyle)和字段在Java源码中定义顺序的影响。HostSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oops(Ordinary Object Pointers),从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true(默认为true)，那么子类之中较窄的变量也可能会插入到父类变量之中。
 3）Padding（填充）：  起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的整数倍(1倍或者2倍)，因此，当对象实例数据部分没有对齐时，就需要通过对其填充来补全。
 （4）对象的访问定位  Java程序通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前主流的访问方式有使用句柄和直接指针两种。
 句柄：reference中存储的就是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体的地址信息
直接指针：reference中存储的直接就是对象地址
 使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动(垃圾收集时移动对象是非常普遍的行为)时只会改变句柄中的实例数据指针，而reference本身不需要修改；使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。
注：HotSpot使用的直接指针的方式进行对象访问的。
 </description>
    </item>
    
    <item>
      <title>JVM学习一之运行时数据区域</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</link>
      <pubDate>Tue, 17 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</guid>
      <description>Java内存区域与内存溢出异常 （一）运行时数据区域 可参考
https://www.zhihu.com/question/20097631 https://blog.csdn.net/TJtulong/article/details/89598598 https://www.cnblogs.com/chanshuyi/p/jvm_serial_00_why_learn_jvm.html
1、程序计数器（Program Counter Register）  （1）程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器；
（2）程序计数器处于线程独占区；
（3）如果线程执行的是java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址。而如果是native方法，这个计数器的值则为空（Undefined）；
（4）此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域；
 2、Java虚拟机栈（Java Virtual Machine Stack） 虚拟机栈描述的是java方法执行的动态内存模型。 栈帧（方法运行时的基本数据结构）
 每个方法执行，都会创建一个栈帧，伴随着方法从创建到执行完成。用于存储局部变量表，操作数栈，动态链接，方法出口等；
 局部变量表
 1）存放编译器可知的各种基本数据类型，引用类型，returnAddress类型。
2）局部变量表的内存空间在编译器完成分配，当进入一个方法时，这个方法需要在帧分配多少内存是固定的，在方法运行期间是不会改变局部变量表的大小。
3）大小：
StackOverflowError：线程请求的栈深度大于虚拟机所允许的深度； OutOfMemoryError：如果蓄奴籍栈可以动态扩展（大部分都可以），而扩展时无法申请到足够的内存；
 3、本地方法栈（Native Method Stack） 本地方法栈于虚拟方法栈所发挥的作用时非常相似的
区别：本地方法栈为虚拟机执行native方法服务； 虚拟机栈为悉尼及执行Java方法服务；
4、Java堆（Java Heap） Java堆是Java虚拟机所管理的内存中最大的一块，被所有线程共享，在虚拟机启动时创建
 （1）目的：存放对象实例 ；
（2）垃圾收集器管理的主要区域（GC堆，Garbage Collected Heap）：新生代（Eden空间、From Survivor空间、To Survivor空间等）、老年代；另外，还可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）；
（3）OutOfMemoryError：堆中没有内存完成实例分配，并且堆也无法再扩展时抛出；
（4）不需要连续的内存空间，逻辑连续就行。
 5、方法区（Method Area）  （1）方法区是线程共享的内存区域，用于存储已被虚拟机加载的类信息（类的版本、字段、方法、接口）、常量、静态变量、即时编译器编译后的代码等数据；
（2）HotSpot虚拟机上吧方法区成为“永久代”（Permanent Generation），本质上两者并不等价，只是能省去专门为方法区编写内存管理代码的工作；
（3）方法区的垃圾回收效率很低；
（4）OutOfMemoryError：和堆类似。
  （上面说到，jdk1.8 中，已经不存在永久代（方法区），替代它的一块空间叫做 “ 元空间 ”，和永久代类似，都是 JVM 规范对方法区的实现，但是元空间并不在虚拟机中，而是使用本地内存，元空间的大小仅受本地内存限制，但可以通过 -XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 来指定元空间的大小。）</description>
    </item>
    
    <item>
      <title>JVM学习之一些重要的知识点</title>
      <link>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Tue, 17 Mar 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/jvm%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>https://www.cnblogs.com/chanshuyi/p/jvm_serial_04_from_source_code_to_machine_code.html
1、编译器和解释器，源代码到字节码再到机器码 JIT编译器（Just In Time Compiler）  当源代码转化为字节码之后，其实要运行程序，有两种选择。一种是使用 Java 解释器解释执行字节码，另一种则是使用 JIT 编译器将字节码转化为本地机器代码。
这两种方式的区别在于，前者启动速度快但运行速度慢，而后者启动速度慢但运行速度快。至于为什么会这样，其原因很简单。因为解释器不需要像 JIT 编译器一样，将所有字节码都转化为机器码，自然就少去了优化的时间。而当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。所以在实际情况中，为了运行速度以及效率，我们通常采用两者相结合的方式进行 Java 代码的编译执行。
  在 JVM 中有三个非常重要的编译器，它们分别是：前端编译器、JIT 编译器、AOT 编译器。
前端编译器，最常见的就是我们的 javac 编译器，其将 Java 源代码编译为 Java 字节码文件。JIT 即时编译器，最常见的是 HotSpot 虚拟机中的 Client Compiler 和 Server Compiler，其将 Java 字节码编译为本地机器代码。而 AOT 编译器则能将源代码直接编译为本地机器码。这三种编译器的编译速度和编译质量如下：
编译速度上，解释执行 &amp;gt; AOT 编译器 &amp;gt; JIT 编译器。
编译质量上，JIT 编译器 &amp;gt; AOT 编译器 &amp;gt; 解释执行。
而在 JVM 中，通过这几种不同方式的配合，使得 JVM 的编译质量和运行速度达到最优的状态。
 2、字节码结构 https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html
3、类加载执行步骤  JVM 虚拟机执行 class 字节码的过程可以分为七个阶段：加载、验证、准备、解析、初始化、使用、卸载。</description>
    </item>
    
    <item>
      <title>java基础学习笔记多线程之线程创建</title>
      <link>https://rrrwx.github.io/2020/%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 17 Feb 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/%E7%BA%BF%E7%A8%8B/</guid>
      <description>参考
  &amp;mdash;Runnable Module java.base Package java.lang
@FunctionalInterface public interface Runnable (since jdk1.0)
public interface Runnable { public abstract void run(); }   &amp;mdash;Thread Module java.base Package java.lang
public class Thread extends Object implements Runnable (since jdk1.0)
  &amp;mdash;Callable Module java.base Package java.util.concurrent
@FunctionalInterface public interface Callable(since jdk1.5)
public interface Callable&amp;lt;V&amp;gt; { /** * Computes a result, or throws an exception if unable to do so. * * @return computed result * @throws Exception if unable to compute a result */ V call() throws Exception; }  Future就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。</description>
    </item>
    
    <item>
      <title>java基础学习笔记之小记</title>
      <link>https://rrrwx.github.io/2020/%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sun, 16 Feb 2020 00:18:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/%E5%B0%8F%E8%AE%B0/</guid>
      <description>想到什么，看到什么，就记什么 参考教程尚学堂、阿里云课堂等
1.比较comparator和comparable  Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。而Comparator是比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。
Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。
两种方法各有优劣， 用Comparable 简单， 只要实现Comparable 接口的对象直接就成为一个可以比较的对象，但是需要修改源代码。 用Comparator 的好处是不需要修改源代码， 而是另外实现一个比较器， 当某个自定义的对象需要作比较的时候，把比较器和对象一起传递过去就可以比大小了， 并且在Comparator 里面用户可以自己实现复杂的可以通用的逻辑，使其可以匹配一些比较简单的对象，那样就可以节省很多重复劳动了。
 2.ArrayList和数组  ArrayList就是“动态数组”，也是一个对象。
创建一个ArrayList对象，该对象存放在堆内存中，且是一个内存连续的内存区域。
1、ArrayList是用数组实现的，这个数组的内存是连续的，不存在相邻元素之间还隔着其他内存。
2、索引ArrayList时，速度比原生数组慢是因为你要用get方法，这是一个“函数调用”，而数组直接用[ ]访问，相当于直接操作内存地址，速度当然比函数调用快。
 3.this和方法调用  java里面的this可以省略，因为编译器会自动加上。 java的方法里面不能再定义方法，不过可以定义类，在类里又可以定义新的方法。（python的函数里面可以定义函数）
 4.PATH和CLASSPATH区别  PATH：操作系统提供的路径配置，定义所有可执行文件的类加载路径；
CLASSPATH：由JRE提供的，用于定义java程序解释时类加载路径，可以用“CLASSPATH=路径”的命令形式来定义；
JVM -&amp;gt; CLASSPATH定义的路径 -&amp;gt; 加载字节码文件。
 5.java数据类型    数据类型 大小/位 表示的数值范围     long(长整型) 64 -2E63 ~ 2E63-1   int(整型) 32 -2147483648 ~ 21474483647   short(短整型) 16 -32768~32767   byte(位) 8 -128 ~ 127   char(字符) 16 0 ~ 65536   float(单精度) 32 -3.</description>
    </item>
    
    <item>
      <title>java正则表达式</title>
      <link>https://rrrwx.github.io/2020/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 16 Feb 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>JDK1.4之后正则默认被JDK所支持，并且提供java.util.regex开发包，同时String类也支持直接正则处理
 1.常用正则标记 （1）字符：匹配单个字符。 a：表示匹配字母a； \\：转义字符&amp;#34;\&amp;#34;； \t：转义字符&amp;#34;\t&amp;#34;； \n：转义字符&amp;#34;\n&amp;#34;； （2）一组字符：任意匹配里面的单个字符 [abc]：可能是字母a、b或c； [^abc]：不是字母a、b或c中的任意一个； [a-zA-Z]：全部字母中的任意一个； [0-9]：全部数字中的任意一个； （3）边界匹配：（JavaScript里面可能会用到） ^：一组正则的开始； $：一组正则的结束； （4）简写表达式：每一位出现的简写标记也只表示一位 .：任意一位字符； \d：任意一位数字，等价于.[0-9]； \D：非数字的任意字符，等价于.[^0-9]； \w：任意一位字母、数字、_，等价于.[a-zA-Z0-9]； \W：非字母、数字、_以外的任意字符，等价于.[^a-zA-Z0-9]； \s：任意的一位空格，例如&amp;#34;\n&amp;#34;、&amp;#34;\t&amp;#34;、&amp;#34; &amp;#34;； \s：空格以外的任意字符； （5）数量表示：匹配多位字符 ?：出现0次或1次； *：出现0次、1次或多次； +：出现1次或多次； {n}：出啊先n次； {n,}：出现n次及以上； {n,m}：出现n~m次； （6）逻辑表示：与、或、非 表达式A表达式B：表达式A后面紧跟着表达式B； 表达式A|表达式B：表达式A或表达式B； （表达式）：将多个表达式合成一个表示，作为一组出现； 2.String类对正则的支持 public boolean matches(String regex) //匹配指定正则表达式 public String replaceAll(String regex, String replacement) //替换指定正则的全部内容 public String replaceFirst(String regex, String replacement) //替换指定正则的首个内容 public String[] split(String regex) //按照指定正则全拆分 public String[] split(String regex, int limit) //按照指定的正则拆分为指定个数 3.java.util.regex包支持 该包中有两个核心的正则操作类：Pattern（正则模式）和Matcher（匹配）</description>
    </item>
    
    <item>
      <title>java基础学习笔记（二）</title>
      <link>https://rrrwx.github.io/2020/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sat, 15 Feb 2020 00:15:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>12.字符编码 System.out.println(&amp;#34;系统默认编码：&amp;#34;+ System.getProperty(&amp;#34;file.encoding&amp;#34;);//获取本地系统默认编码 //系统默认编码：UTF-8 （从JDK1.9起）  ISO8859-1：一种国际通用的单字节编码，最多只能表示0~255的字符范围，主要在英文传输中使用；
GBK/GB2312：中文的国标编码，专门用来表示汉字，是双字节编码，如果在此编码器中出现了中文，则使用ISO8859-1编码。GBK可以表示简体中文和繁体中文，而GB2312只能表示简体中文，GBK兼容GBK2312；
UNICODE：十六进制编码，可以准确地表示出任何语言文字，此编码不兼容ISO8859-1编码；
UTF-8编码：由于UNICODE不支持ISO8859-1编码，而且占用空间较多，英文字母也需要双字节去编码，不便于存储和传输，于是产生了UTF编码。UTF兼容ISO8859-1编码，同时也可以用来表示所有语言字符，但是UTF编码是不定长的编码，每一个字符的长度从1~6个字节不等，一般在中文网页使用此编码，可以节省空间。
 13.String.intern() https://blog.csdn.net/tyyking/article/details/82496901
 new String都是在堆上创建字符串对象。当调用 intern() 方法时，编译器会将字符串添加到常量池中（stringTable维护），并返回指向该常量的引用。
JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用。简单的说，就是往常量池放的东西变了：原来在常量池中找不到时，复制一个副本放到常量池，1.7后则是将在堆上的地址引用复制到常量池。
 //Q：下列程序的输出结果： String s1 = “abc”; String s2 = “abc”; System.out.println(s1 == s2); //A：true，均指向常量池中对象。  //Q：下列程序的输出结果： String s1 = new String(“abc”); String s2 = new String(“abc”); System.out.println(s1 == s2); //A：false，两个引用指向堆中的不同对象。  //Q：下列程序的输出结果： String s1 = “abc”; String s2 = “a”; String s3 = “bc”; String s4 = s2 + s3; System.</description>
    </item>
    
    <item>
      <title>java基础学习笔记（一）</title>
      <link>https://rrrwx.github.io/2020/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Sat, 15 Feb 2020 00:10:36 +0800</pubDate>
      
      <guid>https://rrrwx.github.io/2020/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>1.方法可变参数： int &amp;hellip; data (JDK1.5以后提供，相当于数组的变相应用)
int sum(int ... data){} sum(1,2,3); sum(new int [] {1,2,3}); 方法中可变参数只能定义在最后，并且只能定义一个
2.类在java中是一种引用数据类型； String类的实现都是通过数组的形式进行保存的，因此对于String内部的数据一定是无法改变的；另外在jdk1.8以前，使用char数组来保存，而jdk1.9以后都使用byte数组来保存 String类的比较应该使用equals (https://blog.csdn.net/barryhappy/article/details/6082823)； String.intern()可以将对象手动入池，但麻烦，因此直接赋值比构造方法更节省空间。
3.override（覆写）和overloading（重载）    区别 overloading（重载） override（覆写）     定义 方法名称相同，参数类型和个数不同 方法名称、参数类型及个数、返回值类型全部相同   权限 无权限要求 被子类覆写的方法不能拥有比父类更严格的访问控制权限   范围 发生在同一个类中 发生在继承关系类中     构造方法不能被继承，因此不能被覆写，但可以被重载； 父类方法定义private时，子类无法覆写该方法
4.this和super （1）this表示先从本类查找所需要的属性或者方法，弱国本类不存在则查找父类定义，而super表示不查找子类，直接查找父类； （2）this()调用的是本类构造，super调用的是父类构造，而且都必须放在构造方法的首行，所以不能同时出现； （3）this可以表示当前对象；
5.volatile和synchronized的区别 （1）volatile主要使用于属性上，而synchronized应用于方法和代码块上； （2）volatile无法描述同步的处理，只是一种直接内存的处理，避免了副本的操作，节约了复制变量副本和同步的时间，而synchronized是实现同步操作的关键字（同步的时候使用volatile的同时还是要使用synchronized）。
6.String和StringBuffer、StringBuilder  String类是字符串的首选类型，其最大特点是内容不允许修改，StringBuffer和StringBuilder类的内容允许修改
在开发中，大部分情况都优先考虑String类，只有在频繁修改字符串的操作上才会考虑使用StringBuffer和StringBuilder类。
 （1）StringBuffer是线程安全的
 StringBuffer是在jdk1.0版本中提供的，但是jdk1.5之后又提供了StringBuilder类，两个类的唯一区别在于：StringBuffer类中的方法使用了synchronized关键字定义，适合多线程并发访问时的同步操作，因此属于线程安全的方法；而StringBuilder类没有这样做，属于非线程安全的方法
 （2）字符串静态常量池
String str=&amp;#34;hello &amp;#34;+&amp;#34;java&amp;#34;+&amp;#34; world&amp;#34;; 这句程序的本质操作实际上是由StringBuffer来完成的，其中所有的“+”操作都变成“append”</description>
    </item>
    
  </channel>
</rss>